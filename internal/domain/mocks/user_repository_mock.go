// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "game/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CheckExistsByID provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) CheckExistsByID(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CheckExistsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExistsByID'
type MockUserRepository_CheckExistsByID_Call struct {
	*mock.Call
}

// CheckExistsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) CheckExistsByID(ctx interface{}, id interface{}) *MockUserRepository_CheckExistsByID_Call {
	return &MockUserRepository_CheckExistsByID_Call{Call: _e.mock.On("CheckExistsByID", ctx, id)}
}

func (_c *MockUserRepository_CheckExistsByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_CheckExistsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_CheckExistsByID_Call) Return(_a0 bool, _a1 error) *MockUserRepository_CheckExistsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CheckExistsByID_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserRepository_CheckExistsByID_Call {
	_c.Call.Return(run)
	return _c
}

// CheckExistsByName provides a mock function with given fields: ctx, username
func (_m *MockUserRepository) CheckExistsByName(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CheckExistsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExistsByName'
type MockUserRepository_CheckExistsByName_Call struct {
	*mock.Call
}

// CheckExistsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserRepository_Expecter) CheckExistsByName(ctx interface{}, username interface{}) *MockUserRepository_CheckExistsByName_Call {
	return &MockUserRepository_CheckExistsByName_Call{Call: _e.mock.On("CheckExistsByName", ctx, username)}
}

func (_c *MockUserRepository_CheckExistsByName_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_CheckExistsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_CheckExistsByName_Call) Return(_a0 bool, _a1 error) *MockUserRepository_CheckExistsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CheckExistsByName_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserRepository_CheckExistsByName_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, username, password
func (_m *MockUserRepository) Create(ctx context.Context, username string, password string) (domain.User, error) {
	ret := _m.Called(ctx, username, password)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, username interface{}, password interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, username, password)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 domain.User, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(context.Context, string, string) (domain.User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, username
func (_m *MockUserRepository) GetByName(ctx context.Context, username string) (domain.User, error) {
	ret := _m.Called(ctx, username)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockUserRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserRepository_Expecter) GetByName(ctx interface{}, username interface{}) *MockUserRepository_GetByName_Call {
	return &MockUserRepository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, username)}
}

func (_c *MockUserRepository_GetByName_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByName_Call) Return(_a0 domain.User, _a1 error) *MockUserRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUserRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByIDs provides a mock function with given fields: ctx, ids
func (_m *MockUserRepository) GetUsersByIDs(ctx context.Context, ids []string) ([]domain.User, error) {
	ret := _m.Called(ctx, ids)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]domain.User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []domain.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUsersByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByIDs'
type MockUserRepository_GetUsersByIDs_Call struct {
	*mock.Call
}

// GetUsersByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *MockUserRepository_Expecter) GetUsersByIDs(ctx interface{}, ids interface{}) *MockUserRepository_GetUsersByIDs_Call {
	return &MockUserRepository_GetUsersByIDs_Call{Call: _e.mock.On("GetUsersByIDs", ctx, ids)}
}

func (_c *MockUserRepository_GetUsersByIDs_Call) Run(run func(ctx context.Context, ids []string)) *MockUserRepository_GetUsersByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockUserRepository_GetUsersByIDs_Call) Return(_a0 []domain.User, _a1 error) *MockUserRepository_GetUsersByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUsersByIDs_Call) RunAndReturn(run func(context.Context, []string) ([]domain.User, error)) *MockUserRepository_GetUsersByIDs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserRepository(t mockConstructorTestingTNewMockUserRepository) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
