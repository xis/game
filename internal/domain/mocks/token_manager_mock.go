// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTokenManager is an autogenerated mock type for the TokenManager type
type MockTokenManager struct {
	mock.Mock
}

type MockTokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenManager) EXPECT() *MockTokenManager_Expecter {
	return &MockTokenManager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userID
func (_m *MockTokenManager) Create(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTokenManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTokenManager_Expecter) Create(ctx interface{}, userID interface{}) *MockTokenManager_Create_Call {
	return &MockTokenManager_Create_Call{Call: _e.mock.On("Create", ctx, userID)}
}

func (_c *MockTokenManager_Create_Call) Run(run func(ctx context.Context, userID string)) *MockTokenManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenManager_Create_Call) Return(_a0 string, _a1 error) *MockTokenManager_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManager_Create_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTokenManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserID provides a mock function with given fields: ctx, token
func (_m *MockTokenManager) ExtractUserID(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManager_ExtractUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserID'
type MockTokenManager_ExtractUserID_Call struct {
	*mock.Call
}

// ExtractUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockTokenManager_Expecter) ExtractUserID(ctx interface{}, token interface{}) *MockTokenManager_ExtractUserID_Call {
	return &MockTokenManager_ExtractUserID_Call{Call: _e.mock.On("ExtractUserID", ctx, token)}
}

func (_c *MockTokenManager_ExtractUserID_Call) Run(run func(ctx context.Context, token string)) *MockTokenManager_ExtractUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenManager_ExtractUserID_Call) Return(_a0 string, _a1 error) *MockTokenManager_ExtractUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManager_ExtractUserID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTokenManager_ExtractUserID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTokenManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenManager creates a new instance of MockTokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenManager(t mockConstructorTestingTNewMockTokenManager) *MockTokenManager {
	mock := &MockTokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
