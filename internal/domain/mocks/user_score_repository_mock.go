// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "game/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUserScoreRepository is an autogenerated mock type for the UserScoreRepository type
type MockUserScoreRepository struct {
	mock.Mock
}

type MockUserScoreRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserScoreRepository) EXPECT() *MockUserScoreRepository_Expecter {
	return &MockUserScoreRepository_Expecter{mock: &_m.Mock}
}

// GetLeaderboard provides a mock function with given fields: ctx
func (_m *MockUserScoreRepository) GetLeaderboard(ctx context.Context) (domain.Leaderboard, error) {
	ret := _m.Called(ctx)

	var r0 domain.Leaderboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.Leaderboard, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.Leaderboard); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.Leaderboard)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserScoreRepository_GetLeaderboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboard'
type MockUserScoreRepository_GetLeaderboard_Call struct {
	*mock.Call
}

// GetLeaderboard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserScoreRepository_Expecter) GetLeaderboard(ctx interface{}) *MockUserScoreRepository_GetLeaderboard_Call {
	return &MockUserScoreRepository_GetLeaderboard_Call{Call: _e.mock.On("GetLeaderboard", ctx)}
}

func (_c *MockUserScoreRepository_GetLeaderboard_Call) Run(run func(ctx context.Context)) *MockUserScoreRepository_GetLeaderboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserScoreRepository_GetLeaderboard_Call) Return(_a0 domain.Leaderboard, _a1 error) *MockUserScoreRepository_GetLeaderboard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserScoreRepository_GetLeaderboard_Call) RunAndReturn(run func(context.Context) (domain.Leaderboard, error)) *MockUserScoreRepository_GetLeaderboard_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTopScore provides a mock function with given fields: ctx, userID
func (_m *MockUserScoreRepository) GetUserTopScore(ctx context.Context, userID string) (domain.UserScore, error) {
	ret := _m.Called(ctx, userID)

	var r0 domain.UserScore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.UserScore, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.UserScore); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.UserScore)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserScoreRepository_GetUserTopScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTopScore'
type MockUserScoreRepository_GetUserTopScore_Call struct {
	*mock.Call
}

// GetUserTopScore is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserScoreRepository_Expecter) GetUserTopScore(ctx interface{}, userID interface{}) *MockUserScoreRepository_GetUserTopScore_Call {
	return &MockUserScoreRepository_GetUserTopScore_Call{Call: _e.mock.On("GetUserTopScore", ctx, userID)}
}

func (_c *MockUserScoreRepository_GetUserTopScore_Call) Run(run func(ctx context.Context, userID string)) *MockUserScoreRepository_GetUserTopScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserScoreRepository_GetUserTopScore_Call) Return(_a0 domain.UserScore, _a1 error) *MockUserScoreRepository_GetUserTopScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserScoreRepository_GetUserTopScore_Call) RunAndReturn(run func(context.Context, string) (domain.UserScore, error)) *MockUserScoreRepository_GetUserTopScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTopScore provides a mock function with given fields: ctx, userID, score
func (_m *MockUserScoreRepository) UpdateUserTopScore(ctx context.Context, userID string, score float64) error {
	ret := _m.Called(ctx, userID, score)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, userID, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserScoreRepository_UpdateUserTopScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTopScore'
type MockUserScoreRepository_UpdateUserTopScore_Call struct {
	*mock.Call
}

// UpdateUserTopScore is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - score float64
func (_e *MockUserScoreRepository_Expecter) UpdateUserTopScore(ctx interface{}, userID interface{}, score interface{}) *MockUserScoreRepository_UpdateUserTopScore_Call {
	return &MockUserScoreRepository_UpdateUserTopScore_Call{Call: _e.mock.On("UpdateUserTopScore", ctx, userID, score)}
}

func (_c *MockUserScoreRepository_UpdateUserTopScore_Call) Run(run func(ctx context.Context, userID string, score float64)) *MockUserScoreRepository_UpdateUserTopScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockUserScoreRepository_UpdateUserTopScore_Call) Return(_a0 error) *MockUserScoreRepository_UpdateUserTopScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserScoreRepository_UpdateUserTopScore_Call) RunAndReturn(run func(context.Context, string, float64) error) *MockUserScoreRepository_UpdateUserTopScore_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUserScoreRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserScoreRepository creates a new instance of MockUserScoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserScoreRepository(t mockConstructorTestingTNewMockUserScoreRepository) *MockUserScoreRepository {
	mock := &MockUserScoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
