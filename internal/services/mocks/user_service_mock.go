// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "game/internal/domain"

	mock "github.com/stretchr/testify/mock"

	service "game/internal/services"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *MockUserService) Login(ctx context.Context, username string, password string) (service.LoginResult, error) {
	ret := _m.Called(ctx, username, password)

	var r0 service.LoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (service.LoginResult, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) service.LoginResult); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(service.LoginResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(_a0 service.LoginResult, _a1 error) *MockUserService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(context.Context, string, string) (service.LoginResult, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, username, password
func (_m *MockUserService) Register(ctx context.Context, username string, password string) (domain.User, error) {
	ret := _m.Called(ctx, username, password)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) Register(ctx interface{}, username interface{}, password interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, username, password)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 domain.User, _a1 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(context.Context, string, string) (domain.User, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserService(t mockConstructorTestingTNewMockUserService) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
